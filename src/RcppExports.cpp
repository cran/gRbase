// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/gRbase.h"
#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// allSubsets0_cpp
List allSubsets0_cpp(IntegerVector x);
static SEXP gRbase_allSubsets0_cpp_try(SEXP xSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< IntegerVector >::type x(xSEXP );
        List __result = allSubsets0_cpp(x);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_allSubsets0_cpp(SEXP xSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_allSubsets0_cpp_try(xSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// allSubsets_cpp
SEXP allSubsets_cpp(SEXP& XX_);
static SEXP gRbase_allSubsets_cpp_try(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< SEXP& >::type XX_(XX_SEXP );
        SEXP __result = allSubsets_cpp(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_allSubsets_cpp(SEXP XX_SEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_allSubsets_cpp_try(XX_SEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// cell2entry_cpp
int cell2entry_cpp(NumericVector cell, IntegerVector adim);
RcppExport SEXP gRbase_cell2entry_cpp(SEXP cellSEXP, SEXP adimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cell(cellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type adim(adimSEXP );
        int __result = cell2entry_cpp(cell, adim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// cell2entry2_cpp
int cell2entry2_cpp(NumericVector cell, IntegerVector plevels);
RcppExport SEXP gRbase_cell2entry2_cpp(SEXP cellSEXP, SEXP plevelsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cell(cellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type plevels(plevelsSEXP );
        int __result = cell2entry2_cpp(cell, plevels);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// nextCell_cpp
NumericVector nextCell_cpp(NumericVector cell, IntegerVector adim);
RcppExport SEXP gRbase_nextCell_cpp(SEXP cellSEXP, SEXP adimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cell(cellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type adim(adimSEXP );
        NumericVector __result = nextCell_cpp(cell, adim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// nextCellSlicePrim_cpp
NumericVector nextCellSlicePrim_cpp(NumericVector cell, IntegerVector adim, IntegerVector sliceIndic);
RcppExport SEXP gRbase_nextCellSlicePrim_cpp(SEXP cellSEXP, SEXP adimSEXP, SEXP sliceIndicSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cell(cellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type adim(adimSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type sliceIndic(sliceIndicSEXP );
        NumericVector __result = nextCellSlicePrim_cpp(cell, adim, sliceIndic);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// nextCellSlice_cpp
NumericVector nextCellSlice_cpp(NumericVector cell, IntegerVector adim, IntegerVector sliceSet);
RcppExport SEXP gRbase_nextCellSlice_cpp(SEXP cellSEXP, SEXP adimSEXP, SEXP sliceSetSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cell(cellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type adim(adimSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type sliceSet(sliceSetSEXP );
        NumericVector __result = nextCellSlice_cpp(cell, adim, sliceSet);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// slice2entry_cpp
IntegerVector slice2entry_cpp(IntegerVector sliceCell, IntegerVector sliceSet, IntegerVector adim);
RcppExport SEXP gRbase_slice2entry_cpp(SEXP sliceCellSEXP, SEXP sliceSetSEXP, SEXP adimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type sliceCell(sliceCellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type sliceSet(sliceSetSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type adim(adimSEXP );
        IntegerVector __result = slice2entry_cpp(sliceCell, sliceSet, adim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getCellNumberPrim_cpp
int getCellNumberPrim_cpp(NumericVector cell, IntegerVector perm, IntegerVector pvec);
RcppExport SEXP gRbase_getCellNumberPrim_cpp(SEXP cellSEXP, SEXP permSEXP, SEXP pvecSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cell(cellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type perm(permSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type pvec(pvecSEXP );
        int __result = getCellNumberPrim_cpp(cell, perm, pvec);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getCellNumber_cpp
int getCellNumber_cpp(NumericVector cell, IntegerVector adim, IntegerVector perm);
RcppExport SEXP gRbase_getCellNumber_cpp(SEXP cellSEXP, SEXP adimSEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type cell(cellSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type adim(adimSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type perm(permSEXP );
        int __result = getCellNumber_cpp(cell, adim, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// permuteCellEntries_cpp
IntegerVector permuteCellEntries_cpp(IntegerVector perm, IntegerVector adim);
RcppExport SEXP gRbase_permuteCellEntries_cpp(SEXP permSEXP, SEXP adimSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< IntegerVector >::type perm(permSEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type adim(adimSEXP );
        IntegerVector __result = permuteCellEntries_cpp(perm, adim);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayMargin0_cpp
NumericVector arrayMargin0_cpp(NumericVector a1, IntegerVector marg_idx);
RcppExport SEXP gRbase_arrayMargin0_cpp(SEXP a1SEXP, SEXP marg_idxSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< IntegerVector >::type marg_idx(marg_idxSEXP );
        NumericVector __result = arrayMargin0_cpp(a1, marg_idx);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayMarginChr_cpp
NumericVector arrayMarginChr_cpp(NumericVector a1, CharacterVector marg);
RcppExport SEXP gRbase_arrayMarginChr_cpp(SEXP a1SEXP, SEXP margSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type marg(margSEXP );
        NumericVector __result = arrayMarginChr_cpp(a1, marg);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayMargin_cpp
SEXP arrayMargin_cpp(SEXP a1, SEXP marg);
RcppExport SEXP gRbase_arrayMargin_cpp(SEXP a1SEXP, SEXP margSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< SEXP >::type marg(margSEXP );
        SEXP __result = arrayMargin_cpp(a1, marg);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// extendArrays_cpp
List extendArrays_cpp(const NumericVector& a1, const NumericVector& a2);
RcppExport SEXP gRbase_extendArrays_cpp(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type a2(a2SEXP );
        List __result = extendArrays_cpp(a1, a2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// extendArrayAlong_cpp
NumericVector extendArrayAlong_cpp(NumericVector a1, NumericVector a2);
RcppExport SEXP gRbase_extendArrayAlong_cpp(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type a2(a2SEXP );
        NumericVector __result = extendArrayAlong_cpp(a1, a2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// alignArrays_cpp
List alignArrays_cpp(NumericVector a1, NumericVector a2);
RcppExport SEXP gRbase_alignArrays_cpp(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type a2(a2SEXP );
        List __result = alignArrays_cpp(a1, a2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// alignArrays2_cpp
List alignArrays2_cpp(NumericVector a1, NumericVector a2);
RcppExport SEXP gRbase_alignArrays2_cpp(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type a2(a2SEXP );
        List __result = alignArrays2_cpp(a1, a2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayOp2_cpp
NumericVector arrayOp2_cpp(const NumericVector& a1, const NumericVector& a2, const char op = '*');
RcppExport SEXP gRbase_arrayOp2_cpp(SEXP a1SEXP, SEXP a2SEXP, SEXP opSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type a2(a2SEXP );
        Rcpp::traits::input_parameter< const char >::type op(opSEXP );
        NumericVector __result = arrayOp2_cpp(a1, a2, op);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayOp_cpp
NumericVector arrayOp_cpp(const NumericVector& a1, const NumericVector& a2, const char op = '*');
RcppExport SEXP gRbase_arrayOp_cpp(SEXP a1SEXP, SEXP a2SEXP, SEXP opSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type a2(a2SEXP );
        Rcpp::traits::input_parameter< const char >::type op(opSEXP );
        NumericVector __result = arrayOp_cpp(a1, a2, op);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// extendArrayAlongOLD_cpp
NumericVector extendArrayAlongOLD_cpp(const NumericVector& a1, const NumericVector& a2);
RcppExport SEXP gRbase_extendArrayAlongOLD_cpp(SEXP a1SEXP, SEXP a2SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type a2(a2SEXP );
        NumericVector __result = extendArrayAlongOLD_cpp(a1, a2);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayOpOLD_cpp
NumericVector arrayOpOLD_cpp(NumericVector a1, NumericVector a2, const char op = '*');
RcppExport SEXP gRbase_arrayOpOLD_cpp(SEXP a1SEXP, SEXP a2SEXP, SEXP opSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< NumericVector >::type a2(a2SEXP );
        Rcpp::traits::input_parameter< const char >::type op(opSEXP );
        NumericVector __result = arrayOpOLD_cpp(a1, a2, op);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayOp2OLD_cpp
NumericVector arrayOp2OLD_cpp(const NumericVector& a1, const NumericVector& a2, const char op = '*');
RcppExport SEXP gRbase_arrayOp2OLD_cpp(SEXP a1SEXP, SEXP a2SEXP, SEXP opSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const NumericVector& >::type a1(a1SEXP );
        Rcpp::traits::input_parameter< const NumericVector& >::type a2(a2SEXP );
        Rcpp::traits::input_parameter< const char >::type op(opSEXP );
        NumericVector __result = arrayOp2OLD_cpp(a1, a2, op);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// getPerm
IntegerVector getPerm(const SEXP& XX_, const SEXP& perm);
RcppExport SEXP gRbase_getPerm(SEXP XX_SEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< const SEXP& >::type XX_(XX_SEXP );
        Rcpp::traits::input_parameter< const SEXP& >::type perm(permSEXP );
        IntegerVector __result = getPerm(XX_, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayPerm0_cpp
SEXP arrayPerm0_cpp(SEXP XX_, SEXP perm);
RcppExport SEXP gRbase_arrayPerm0_cpp(SEXP XX_SEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type perm(permSEXP );
        SEXP __result = arrayPerm0_cpp(XX_, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// arrayPerm_cpp
SEXP arrayPerm_cpp(SEXP XX_, SEXP perm);
RcppExport SEXP gRbase_arrayPerm_cpp(SEXP XX_SEXP, SEXP permSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type perm(permSEXP );
        SEXP __result = arrayPerm_cpp(XX_, perm);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// fitLoglin_cpp
List fitLoglin_cpp(NumericVector x, List glist, double peps = 1e-3);
RcppExport SEXP gRbase_fitLoglin_cpp(SEXP xSEXP, SEXP glistSEXP, SEXP pepsSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP );
        Rcpp::traits::input_parameter< List >::type glist(glistSEXP );
        Rcpp::traits::input_parameter< double >::type peps(pepsSEXP );
        List __result = fitLoglin_cpp(x, glist, peps);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// MAT2ftM
SEXP MAT2ftM(SEXP XX_);
RcppExport SEXP gRbase_MAT2ftM(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = MAT2ftM(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// SYMMAT2ftM
SEXP SYMMAT2ftM(SEXP XX_);
RcppExport SEXP gRbase_SYMMAT2ftM(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = SYMMAT2ftM(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// is_sym_MAT
SEXP is_sym_MAT(SEXP XX_);
RcppExport SEXP gRbase_is_sym_MAT(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = is_sym_MAT(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// matrix2dgCMatrix
SEXP matrix2dgCMatrix(SEXP XX_);
RcppExport SEXP gRbase_matrix2dgCMatrix(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = matrix2dgCMatrix(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dgCMatrix2matrix
SEXP dgCMatrix2matrix(SEXP XX_);
RcppExport SEXP gRbase_dgCMatrix2matrix(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = dgCMatrix2matrix(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// mcsMAT_
SEXP mcsMAT_(SEXP XX_, SEXP OO_);
RcppExport SEXP gRbase_mcsMAT_(SEXP XX_SEXP, SEXP OO_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type OO_(OO_SEXP );
        SEXP __result = mcsMAT_(XX_, OO_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// moralizeMAT
SEXP moralizeMAT(SEXP XX_);
RcppExport SEXP gRbase_moralizeMAT(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = moralizeMAT(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// propagateLS_cpp
List propagateLS_cpp(List pp_, List rip);
RcppExport SEXP gRbase_propagateLS_cpp(SEXP pp_SEXP, SEXP ripSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< List >::type pp_(pp_SEXP );
        Rcpp::traits::input_parameter< List >::type rip(ripSEXP );
        List __result = propagateLS_cpp(pp_, rip);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// rowmat2list
SEXP rowmat2list(SEXP XX_);
RcppExport SEXP gRbase_rowmat2list(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = rowmat2list(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// colmat2list
SEXP colmat2list(SEXP XX_);
RcppExport SEXP gRbase_colmat2list(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = colmat2list(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// which_matrix_index
SEXP which_matrix_index(SEXP XX_);
RcppExport SEXP gRbase_which_matrix_index(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = which_matrix_index(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// solveSPD
SEXP solveSPD(SEXP X_);
RcppExport SEXP gRbase_solveSPD(SEXP X_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type X_(X_SEXP );
        SEXP __result = solveSPD(X_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// sp_setXtf1
SEXP sp_setXtf1(SEXP XX_, SEXP TF_);
RcppExport SEXP gRbase_sp_setXtf1(SEXP XX_SEXP, SEXP TF_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type TF_(TF_SEXP );
        SEXP __result = sp_setXtf1(XX_, TF_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// topoSortMAT_
SEXP topoSortMAT_(SEXP XX_);
RcppExport SEXP gRbase_topoSortMAT_(SEXP XX_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        SEXP __result = topoSortMAT_(XX_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// triangulateMAT_
SEXP triangulateMAT_(SEXP XX_, SEXP OO_);
RcppExport SEXP gRbase_triangulateMAT_(SEXP XX_SEXP, SEXP OO_SEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::RNGScope __rngScope;
        Rcpp::traits::input_parameter< SEXP >::type XX_(XX_SEXP );
        Rcpp::traits::input_parameter< SEXP >::type OO_(OO_SEXP );
        SEXP __result = triangulateMAT_(XX_, OO_);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP
}
// dagList2dgCMatrix
SEXP dagList2dgCMatrix(List LL, CharacterVector vn);
static SEXP gRbase_dagList2dgCMatrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP );
        SEXP __result = dagList2dgCMatrix(LL, vn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_dagList2dgCMatrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_dagList2dgCMatrix_try(LLSEXP, vnSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// ugList2dgCMatrix
SEXP ugList2dgCMatrix(List LL, CharacterVector vn);
static SEXP gRbase_ugList2dgCMatrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP );
        SEXP __result = ugList2dgCMatrix(LL, vn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_ugList2dgCMatrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_ugList2dgCMatrix_try(LLSEXP, vnSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// dagList2matrix
SEXP dagList2matrix(List LL, CharacterVector vn);
static SEXP gRbase_dagList2matrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP );
        SEXP __result = dagList2matrix(LL, vn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_dagList2matrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_dagList2matrix_try(LLSEXP, vnSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// ugList2matrix
SEXP ugList2matrix(List LL, CharacterVector vn);
static SEXP gRbase_ugList2matrix_try(SEXP LLSEXP, SEXP vnSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        Rcpp::traits::input_parameter< CharacterVector >::type vn(vnSEXP );
        SEXP __result = ugList2matrix(LL, vn);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_ugList2matrix(SEXP LLSEXP, SEXP vnSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_ugList2matrix_try(LLSEXP, vnSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// adjList2tfList
List adjList2tfList(List LL);
static SEXP gRbase_adjList2tfList_try(SEXP LLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        List __result = adjList2tfList(LL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2tfList(SEXP LLSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_adjList2tfList_try(LLSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// adjList2ftList
List adjList2ftList(List LL);
static SEXP gRbase_adjList2ftList_try(SEXP LLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        List __result = adjList2ftList(LL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2ftList(SEXP LLSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_adjList2ftList_try(LLSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// adjList2ftM
CharacterMatrix adjList2ftM(List LL);
static SEXP gRbase_adjList2ftM_try(SEXP LLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        CharacterMatrix __result = adjList2ftM(LL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2ftM(SEXP LLSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_adjList2ftM_try(LLSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// adjList2tfM
CharacterMatrix adjList2tfM(List LL);
static SEXP gRbase_adjList2tfM_try(SEXP LLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        CharacterMatrix __result = adjList2tfM(LL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2tfM(SEXP LLSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_adjList2tfM_try(LLSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// adjList2matrix
SEXP adjList2matrix(List LL);
static SEXP gRbase_adjList2matrix_try(SEXP LLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        SEXP __result = adjList2matrix(LL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2matrix(SEXP LLSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_adjList2matrix_try(LLSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}
// adjList2dgCMatrix
SEXP adjList2dgCMatrix(List LL);
static SEXP gRbase_adjList2dgCMatrix_try(SEXP LLSEXP) {
BEGIN_RCPP
    SEXP __sexp_result;
    {
        Rcpp::traits::input_parameter< List >::type LL(LLSEXP );
        SEXP __result = adjList2dgCMatrix(LL);
        PROTECT(__sexp_result = Rcpp::wrap(__result));
    }
    UNPROTECT(1);
    return __sexp_result;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP gRbase_adjList2dgCMatrix(SEXP LLSEXP) {
    SEXP __result;
    {
        Rcpp::RNGScope __rngScope;
        __result = PROTECT(gRbase_adjList2dgCMatrix_try(LLSEXP));
    }
    Rboolean __isInterrupt = Rf_inherits(__result, "interrupted-error");
    if (__isInterrupt) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean __isError = Rf_inherits(__result, "try-error");
    if (__isError) {
        SEXP __msgSEXP = Rf_asChar(__result);
        UNPROTECT(1);
        Rf_error(CHAR(__msgSEXP));
    }
    UNPROTECT(1);
    return __result;
}

// validate (ensure exported C++ functions exist before calling them)
static int gRbase_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("List(*allSubsets0)(IntegerVector)");
        signatures.insert("SEXP(*allSubsets)(SEXP&)");
        signatures.insert("SEXP(*dagList2dgCMatrix)(List,CharacterVector)");
        signatures.insert("SEXP(*ugList2dgCMatrix)(List,CharacterVector)");
        signatures.insert("SEXP(*dagList2matrix)(List,CharacterVector)");
        signatures.insert("SEXP(*ugList2matrix)(List,CharacterVector)");
        signatures.insert("List(*adjList2tfList)(List)");
        signatures.insert("List(*adjList2ftList)(List)");
        signatures.insert("CharacterMatrix(*adjList2ftM)(List)");
        signatures.insert("CharacterMatrix(*adjList2tfM)(List)");
        signatures.insert("SEXP(*adjList2matrix)(List)");
        signatures.insert("SEXP(*adjList2dgCMatrix)(List)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP gRbase_RcppExport_registerCCallable() { 
    R_RegisterCCallable("gRbase", "gRbase_allSubsets0", (DL_FUNC)gRbase_allSubsets0_cpp_try);
    R_RegisterCCallable("gRbase", "gRbase_allSubsets", (DL_FUNC)gRbase_allSubsets_cpp_try);
    R_RegisterCCallable("gRbase", "gRbase_dagList2dgCMatrix", (DL_FUNC)gRbase_dagList2dgCMatrix_try);
    R_RegisterCCallable("gRbase", "gRbase_ugList2dgCMatrix", (DL_FUNC)gRbase_ugList2dgCMatrix_try);
    R_RegisterCCallable("gRbase", "gRbase_dagList2matrix", (DL_FUNC)gRbase_dagList2matrix_try);
    R_RegisterCCallable("gRbase", "gRbase_ugList2matrix", (DL_FUNC)gRbase_ugList2matrix_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2tfList", (DL_FUNC)gRbase_adjList2tfList_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2ftList", (DL_FUNC)gRbase_adjList2ftList_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2ftM", (DL_FUNC)gRbase_adjList2ftM_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2tfM", (DL_FUNC)gRbase_adjList2tfM_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2matrix", (DL_FUNC)gRbase_adjList2matrix_try);
    R_RegisterCCallable("gRbase", "gRbase_adjList2dgCMatrix", (DL_FUNC)gRbase_adjList2dgCMatrix_try);
    R_RegisterCCallable("gRbase", "gRbase_RcppExport_validate", (DL_FUNC)gRbase_RcppExport_validate);
    return R_NilValue;
}
