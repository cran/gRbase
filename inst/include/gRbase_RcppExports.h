// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef __gRbase_RcppExports_h__
#define __gRbase_RcppExports_h__

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

namespace gRbase {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("gRbase", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("gRbase", "gRbase_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in gRbase");
            }
        }
    }

    inline List allSubsets0(IntegerVector x) {
        typedef SEXP(*Ptr_allSubsets0)(SEXP);
        static Ptr_allSubsets0 p_allSubsets0 = NULL;
        if (p_allSubsets0 == NULL) {
            validateSignature("List(*allSubsets0)(IntegerVector)");
            p_allSubsets0 = (Ptr_allSubsets0)R_GetCCallable("gRbase", "gRbase_allSubsets0");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_allSubsets0(Rcpp::wrap(x));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline SEXP allSubsets(SEXP& XX_) {
        typedef SEXP(*Ptr_allSubsets)(SEXP);
        static Ptr_allSubsets p_allSubsets = NULL;
        if (p_allSubsets == NULL) {
            validateSignature("SEXP(*allSubsets)(SEXP&)");
            p_allSubsets = (Ptr_allSubsets)R_GetCCallable("gRbase", "gRbase_allSubsets");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_allSubsets(Rcpp::wrap(XX_));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP dagList2dgCMatrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_dagList2dgCMatrix)(SEXP,SEXP);
        static Ptr_dagList2dgCMatrix p_dagList2dgCMatrix = NULL;
        if (p_dagList2dgCMatrix == NULL) {
            validateSignature("SEXP(*dagList2dgCMatrix)(List,CharacterVector)");
            p_dagList2dgCMatrix = (Ptr_dagList2dgCMatrix)R_GetCCallable("gRbase", "gRbase_dagList2dgCMatrix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_dagList2dgCMatrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP ugList2dgCMatrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_ugList2dgCMatrix)(SEXP,SEXP);
        static Ptr_ugList2dgCMatrix p_ugList2dgCMatrix = NULL;
        if (p_ugList2dgCMatrix == NULL) {
            validateSignature("SEXP(*ugList2dgCMatrix)(List,CharacterVector)");
            p_ugList2dgCMatrix = (Ptr_ugList2dgCMatrix)R_GetCCallable("gRbase", "gRbase_ugList2dgCMatrix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ugList2dgCMatrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP dagList2matrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_dagList2matrix)(SEXP,SEXP);
        static Ptr_dagList2matrix p_dagList2matrix = NULL;
        if (p_dagList2matrix == NULL) {
            validateSignature("SEXP(*dagList2matrix)(List,CharacterVector)");
            p_dagList2matrix = (Ptr_dagList2matrix)R_GetCCallable("gRbase", "gRbase_dagList2matrix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_dagList2matrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP ugList2matrix(List LL, CharacterVector vn) {
        typedef SEXP(*Ptr_ugList2matrix)(SEXP,SEXP);
        static Ptr_ugList2matrix p_ugList2matrix = NULL;
        if (p_ugList2matrix == NULL) {
            validateSignature("SEXP(*ugList2matrix)(List,CharacterVector)");
            p_ugList2matrix = (Ptr_ugList2matrix)R_GetCCallable("gRbase", "gRbase_ugList2matrix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_ugList2matrix(Rcpp::wrap(LL), Rcpp::wrap(vn));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline List adjList2tfList(List LL) {
        typedef SEXP(*Ptr_adjList2tfList)(SEXP);
        static Ptr_adjList2tfList p_adjList2tfList = NULL;
        if (p_adjList2tfList == NULL) {
            validateSignature("List(*adjList2tfList)(List)");
            p_adjList2tfList = (Ptr_adjList2tfList)R_GetCCallable("gRbase", "gRbase_adjList2tfList");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_adjList2tfList(Rcpp::wrap(LL));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline List adjList2ftList(List LL) {
        typedef SEXP(*Ptr_adjList2ftList)(SEXP);
        static Ptr_adjList2ftList p_adjList2ftList = NULL;
        if (p_adjList2ftList == NULL) {
            validateSignature("List(*adjList2ftList)(List)");
            p_adjList2ftList = (Ptr_adjList2ftList)R_GetCCallable("gRbase", "gRbase_adjList2ftList");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_adjList2ftList(Rcpp::wrap(LL));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<List >(__result);
    }

    inline CharacterMatrix adjList2ftM(List LL) {
        typedef SEXP(*Ptr_adjList2ftM)(SEXP);
        static Ptr_adjList2ftM p_adjList2ftM = NULL;
        if (p_adjList2ftM == NULL) {
            validateSignature("CharacterMatrix(*adjList2ftM)(List)");
            p_adjList2ftM = (Ptr_adjList2ftM)R_GetCCallable("gRbase", "gRbase_adjList2ftM");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_adjList2ftM(Rcpp::wrap(LL));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<CharacterMatrix >(__result);
    }

    inline CharacterMatrix adjList2tfM(List LL) {
        typedef SEXP(*Ptr_adjList2tfM)(SEXP);
        static Ptr_adjList2tfM p_adjList2tfM = NULL;
        if (p_adjList2tfM == NULL) {
            validateSignature("CharacterMatrix(*adjList2tfM)(List)");
            p_adjList2tfM = (Ptr_adjList2tfM)R_GetCCallable("gRbase", "gRbase_adjList2tfM");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_adjList2tfM(Rcpp::wrap(LL));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<CharacterMatrix >(__result);
    }

    inline SEXP adjList2matrix(List LL) {
        typedef SEXP(*Ptr_adjList2matrix)(SEXP);
        static Ptr_adjList2matrix p_adjList2matrix = NULL;
        if (p_adjList2matrix == NULL) {
            validateSignature("SEXP(*adjList2matrix)(List)");
            p_adjList2matrix = (Ptr_adjList2matrix)R_GetCCallable("gRbase", "gRbase_adjList2matrix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_adjList2matrix(Rcpp::wrap(LL));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

    inline SEXP adjList2dgCMatrix(List LL) {
        typedef SEXP(*Ptr_adjList2dgCMatrix)(SEXP);
        static Ptr_adjList2dgCMatrix p_adjList2dgCMatrix = NULL;
        if (p_adjList2dgCMatrix == NULL) {
            validateSignature("SEXP(*adjList2dgCMatrix)(List)");
            p_adjList2dgCMatrix = (Ptr_adjList2dgCMatrix)R_GetCCallable("gRbase", "gRbase_adjList2dgCMatrix");
        }
        RObject __result;
        {
            RNGScope __rngScope;
            __result = p_adjList2dgCMatrix(Rcpp::wrap(LL));
        }
        if (__result.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (__result.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(__result).c_str());
        return Rcpp::as<SEXP >(__result);
    }

}

#endif // __gRbase_RcppExports_h__
